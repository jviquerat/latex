%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Curved elements}

Curvilinear elements are obviously more complex to handle than linear ones, and require more details in their description. This section attempts to cover the aspects required for the implementation of curvilinear elements in a DG method.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Non-linear mapping}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Expression and jacobian matrix}

In the case of curvilinear tetrahedrons, the latter are still mapped from a reference element $T_r$. The difference with the rectilinear case lies in the mapping itself, which will now be non-linear in $\left( \xi, \eta, \zeta \right)$. Obviously, higher-orders mappings will require more control points on $T_r$ (and hence on $T_i$) to be defined, and the reader might feel (rightly) that this will be connected in some way with the use of higher interpolation orders on the tetrahedrons : when using a DG method based on Lagrange polynomials, this connection is straightforward, and, given the remark made in section \ref{section:linmap}, a higher-order mapping will be a weighted sum of Lagrange polynomials defined on $T_r$. Therefore, for a $n^{\text{th}}$ order mapping, we define the usual $M_n$ degrees of freedom (d.o.f.) on the reference tetrahedron $\left( A_j \right)_{j=1,..,M_n}$, where $M_n = \frac{1}{6} (n+1)(n+2)(n+3)$, and we write :

\begin{equation*}
\GV{\psi}^{(n)}_{T_i} \left( \GV{\xi} \right) = \sum_{j=1}^{M_n} L_j^{(n)} \left( \GV{\xi} \right) v_j = \sum_{0 \leq j+k+l \leq n} a_{jkl}^{(n)} \xi^j \eta^k \zeta^l.
\end{equation*}

\noindent For example, a second-order mapping would be written as follows :

\begin{align} \label{eq:map_2}
\begin{split}
\GV{\psi}^{(2)}_{T_i} \left( \GV{\xi} \right) & = a^{(2)}_{1} + a^{(2)}_{2} \xi + a^{(2)}_{3} \eta + a^{(2)}_{4} \zeta \\
& + a^{(2)}_{5} \xi \eta + a^{(2)}_{6} \xi \zeta + a^{(2)}_{7} \eta \zeta + a^{(2)}_{8} \xi^2 + a^{(2)}_{9} \eta^2 + a^{(2)}_{10} \zeta^2.
\end{split}
\end{equation}

\noindent A visual representation of a second-order mapping is here given on figure \ref{fig:second_order_mapping}. In this case, the jacobian matrix is a matrix which terms are first order polynomials in $\xi, \eta, \zeta$, and its determinant is therefore a third order polynomial in the same variables. The following section focuses on the calculation of the second order mapping coefficients $a_{j}^{(2)}$.

\input{fig/second_order_mapping}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Coefficients}

This section details the calculation of the coefficients for the quadratic mapping. From now on, we denote $v_1 - v_2$ the ridge that connects the vertices $v_1$ and $v_2$ through $v_5$.

\noindent To determine the coefficients $a_k^{(2)}$ from the coordinates of the vertices, each ridge is parameterized by choosing an appropriate set of coordinates for $(\xi, \eta, \zeta)$ in the expression of the quadratic mapping. If one considers the ridge $v_1 - v_2$, for example, an appropriate parametrization is :

\begin{equation*}
\GV{\psi}^{(2)}_{T_i} \left( t,0,0 \right) = a^{(2)}_{1} + a^{(2)}_{2} t + a^{(2)}_{8} t^2.
\end{equation*}

\noindent Then, one evaluates the latter parametrization for $t=0$, $t=\frac{1}{2}$ and $t=1$, which respectively correspond to $v_1$, $v_5$ and $v_2$. This provides :

\begin{eqsys} \nonumber
a^{(2)}_{1} & \eg v_1, \\
a^{(2)}_{1} + \frac{a^{(2)}_{2}}{2} + \frac{a^{(2)}_{8}}{4} & \eg v_5, \\
a^{(2)}_{1} + a^{(2)}_{2} + a^{(2)}_{8} & \eg v_2,
\end{eqsys}

\noindent which resolution is trivial. Repeating this procedure on the other ridges with adapted parametrizations then lead to the following quadratic mapping coefficients :

\begin{eqsys} \label{eq:coeffsmap}
a^{(2)}_{1} & \eg v_1, \\
a^{(2)}_{2} & \eg 4 v_5 - v_2 - 3 v_1, \\
a^{(2)}_{3} & \eg 4 v_7 - v_3 - 3 v_1, \\
a^{(2)}_{4} & \eg 4 v_9 - v_4 - 3 v_1, \\
a^{(2)}_{5} & \eg 4 \left( v_1 + v_6 - v_5 - v_7 \right), \\
a^{(2)}_{6} & \eg 4 \left( v_1 + v_8 - v_5 - v_9 \right), \\
a^{(2)}_{7} & \eg 4 \left( v_1 + v_{10} - v_7 - v_9 \right), \\
a^{(2)}_{8} & \eg 2 \left( v_1 + v_2 - 2 v_5 \right), \\
a^{(2)}_{9} & \eg 2 \left( v_1 + v_3 - 2 v_7 \right), \\
a^{(2)}_{10} & \eg 2 \left( v_1 + v_4 - 2 v_9 \right). \\
\end{eqsys}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Interpolation and mapping compatibility}

There is an important remark to make regarding boundary approximation and order of interpolation. It is reminded that the mapping order is noted $n$, whereas the interpolation order, assumed homogeneous for the whole triangulation, is noted $p$. To begin, let us assume that the surface we want to approach with the triangulation of the domain is a quadratic surface (\textit{e.g.} a sphere, an ellipsoid, ...). Then, several constatations are to be made : (i) the physical surface is \emph{exactly} matched by a second order mapping (assuming we rule out the rounding approximations), and any higher-order mapping would degenerate (\textit{e.g.} some coefficients would be zero) in a second-order one; (ii) as presented on figure \ref{fig:map_interp} on a 2D situation, not every $(n,p)$ combination would lead to a proper and efficient use of high orders. Indeed, one clearly sees that the interest of the $(1,2)$ case is doubtful, since more points are used to interpolate fields on an improper shape (\complete dans ce cas en fonction des résultats théoriques). The $(2,1)$ case is obviously uninteresting, since the d.o.f. are the same as in the $(1,1)$ case, the second-order mapping has no effect. High orders are put at good use for the $(2,2)$ and $(2,3)$ cases : since the geometry is exactly fitted, the additional d.o.f. resulting from increased $p$ lies \emph{on the physical boundary}. Therefore, one readily deduces that we must have :

\begin{itemize}
	\myitem $p \geq n$ when the geometry is exactly mapped, and in this case $n$ must be equal to the analytical order of the geometry;
	\myitem $p = n$ when the geometry is not exactly mapped.
\end{itemize}

\input{fig/map_interp}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Curvilinear elements validity and quality}

The matter of validity and quality of straight-edged elements have been widely studied in the previous decade, leading to a variety of highly-efficient mesh generators, such as \verb!gmsh! \cite{Geuz3} or \verb!Netgen! \cite{Schoberl1}, for example. Each of these mesh builders make use of their own mesh quality optimization algorithm, which criteria are based on various geometrical factors such as lengths, angles and volumes. Among these, the most common are the \emph{aspect ratio}, defined as the ratio of the longest edge of an element to its shortest, and the \emph{jacobian determinant}, which gives an indication of the deformation of the physical element compared to the reference one.

\noindent The usual curvilinear meshing procedure consists in (i) creating a rectilinear mesh from a given geometry with usual tools, then (ii) orthogonaly project the high-order nodes of the rectilinear mesh on the curved geometry to obtain the curvilinear mesh \cite{Dey1}. However simple, this method usually leads to a small amount of tangled elements, which detection can be achieved from a study of the transformation jacobian determinant \cite{Geuz1}. Indeed, unlike the rectilinear case, it is not trivial to ensure that the jacobian determinant remains positive \emph{everywhere} inside the high-order mapped element. Although a direct computation of the minimum of the jacobian determinant over the cell is possible, the cost of this method happens to rise dramatically in the case of three dimensions of space and high mapping orders : indeed, it requires to solve a cubic trivariate equation on each cell for a second order mapping, and a sextic one for a third order mapping. In \cite{Geuz1}, the authors exploit a property of the Bezier polynomials to determine bounds of the scaled jacobian determinant. These bounds are then exploited in a mesh optimization procedure that balances the displacement of the nodes with the values of the scaled jacobian. In \cite{Geuz2}, the latter bounds are improved by the use of an adaptative procedure, which shows better performances and robustness than brute-force based algorithms. In the rest of this section, we propose to exploit the first set of Jacobian estimates proposed in \cite{Geuz1} and to check their behavior in the case of a 3D quadratic mapping against exact minimum bounds.

\noindent An interesting property of the Bezier polynomials is that their values remain bounded in the range of their coefficients. This happens to be a very straightforward way to obtain bounds on a given polynomial, although their quality is not guaranteed. Therefore, one would be interested in rewriting the mapping (\ref{eq:map_2}) in a Bezier basis :

\begin{eqnarray} \label{eq:map_b}
\GV{\psi}^{(2)}_{T_i} \left( \GV{\xi} \right) = b^{(2)}_{1} \left( 1 - \xi - \eta - \zeta \right)^{2} + b^{(2)}_{2} \xi \left( 1 - \xi - \eta - \zeta \right) + b^{(2)}_{3} \eta \left( 1 - \xi - \eta - \zeta \right) + b^{(2)}_{4} \zeta \left( 1 - \xi - \eta - \zeta \right) + b^{(2)}_{5} \xi \eta + b^{(2)}_{6} \xi \zeta + b^{(2)}_{7} \eta \zeta + b^{(2)}_{8} \xi^2 + b^{(2)}_{9} \eta^2 + b^{(2)}_{10} \zeta^2,
\end{eqnarray}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Finite element matrices}

One of the major drawbacks of using curved elements is that the FE matrices on a curved tetrahedron $T_i$ cannot be calculated from the FE matrices on the reference tetrahedron $T_r$ anymore. Indeed, the Jacobian determinant is not a constant over $T_i$, and therefore the integrals must be calculated by means of numerical integration on each curved tetrahedron, which will be the topic of the next section. However, the general expressions of the substitutions have already been given in section \ref{section:linmap}, and therefore the reader is referred to this part of the report.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Numerical integration}

In the following, we remind the concept of numerical integration, and detail a few facts that will affect our upcoming integration strategy.

\noindent The basic principle of quadrature and cubature rules is to evaluate the integral of a continuous function by a weighted sum of its values at well-chosen points. Hence, a quadrature or cubature rule can be defined by a set of weight $\left( w_i \right)_{i=1, .., N}$ and a set of points $\left( \GV{\lambda}_i \right)_{i=1, .., N}$ :

\begin{equation*}
\int_{T_r} f(\V{x}) d\V{x} \simeq \sum_{i=1}^N w_i f(\GV{\lambda}_i)
\end{equation*}

\noindent Several matters arise from these ideas, among which are (i) the assumptions made on $f$ and (ii) the number of points $N$ necessary to obtain a good approximation of the integral. The answer to (i) is simply that $f$ must contain no singularity (\textit{e.g.} it must be smooth enough to be well approximated by polynomials). In the case where $f$ is polynomial, the integral can be calculated \emph{exactly}, provided that the cubature rule used to evaluate it is of sufficient order\footnote{A cubature rule is said to be of order $m$ when it evaluates exactly the integral of a polynom of same order}. The matter raised in (ii) is indeed a great one, since it will affect the time required for the calculation of the integral, and, in our case, the time necessary for the assembly of the FE matrices. A very classical set of quadrature and cubature rules are the Gauss-Legendre ones \cite{Stroud1}, which can be exact up to any order when there is no restriction on the number of cubature points. However, the Gauss-Legendre exact quadrature rule of a polynomial of order $2r$ over a $d$-simplex will require $(r+1)^d$ points, which can lead to heavy computational loads in three dimensions of space. In \cite{Cools1}, the authors have compiled optimal existing cubature rules from various references up to the $11^{\text{th}}$ order for tetrahedrons. They require considerably less points for the same accuracy when compared to Gauss-Legendre. It is quite straightforward to determine the polynomial order of the integrand for each matrix :

\begin{itemize}
	\myitem For the mass matrix, the integrand is a polynomial of order $2p + 3(n-1)$;
	\myitem For the stiffness matrix, the integrand is a polynomial of order $2p-1 + 3(n-1)$;
	\myitem For the surface mass matrix, the integrand is not a polynomial.
\end{itemize}

\noindent Therefore, for a second order mapping, exact integration can be achieved for the mass and stiffness matrices for $p \in \left\{2,3,4\right\}$, but no exact integration can be obtained for a third order mapping with these optimal quadrature rules. Therefore, we chose another set of quadrature and cubature rules \cite{Zhang1}, which require a bit more evaluation points than the aforementioned rules, but are all generated from the same algorithm, and are available up to the $13^{\text{th}}$ order for tetrahedrons, and $20^{\text{th}}$ order for triangles. The number of required integration points for the triangle and the tetrahedron are respectively given in table \ref{table:integration_points_tri} and \ref{table:integration_points_tetra}. A graphic comparison of the sets from \cite{Zhang1} with classical Gauss-Legendre rules is given in figure \ref{fig:integration_points}.

\input{table/integration_points_tri}
\input{table/integration_points_tetra}
\input{fig/integration_points}

\begin{remark}
It must be noted that the surface matrices are never exactly integrated, since their integrand is not polynomial. The impact of non-exact numerical integration will be evaluated in the results section.
\end{remark}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Two kinds of curved tetrahedrons}

As they will be treated differently in the implementation, it is worthy to notice that in 3D, two different kinds of curved tetrahedrons will be encountered in curvilinear meshes (this situation does not arise in two dimensions of space). Let us consider a curved surface $\Gamma$ in $\R^3$. As shown on figure \ref{fig:tetra_kinds}, tetrahedrons that are in direct contact with $\Gamma$ can be in three different situations : (i) one of their vertices is on the surface, (ii) one of their edges is on the surface, and (iii) one of their faces is on the surface. Case (i) does not require any special treatment, and this kind of element will be straight-edged. On the opposite, the other two cases will require respectively (ii) one curved edge, and therefore two non-straight faces, and (iii) three curved edges, which means that the four faces of the tetrahedron will be curved.

\input{fig/tetra_kinds}

\noindent The case (ii) requires a little less calculations than (iii), since in this situation the mapping and its jacobian can be simplified. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Down-to-earth and implementation issues}
